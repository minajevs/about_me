import React from "react"
import { flow, pipe, tuple } from 'fp-ts/function'
import { Helmet } from "react-helmet"
import { useStaticQuery, graphql } from "gatsby"
import { join } from "src/utils/pointfree"
import { SiteDataQuery } from 'autogenerated/graphql-types'
import * as Option from "fp-ts/lib/Option"
import { compact, filter, isNonEmpty } from "fp-ts/lib/Array"
import * as Either from "fp-ts/lib/Either"
import { isNull, isNullOrUndefined, not } from "src/utils/predicates"
import { joinWithDefault } from "src/utils"

export type Props = {
  description?: string
  title?: string
}

const query = graphql`
  query SiteData {
    site {
      siteMetadata {
        title
        description
        author
      }
    }
  }
  `

const SEO = ({ description, title: pageTitle }: Props) => {
  const { site } = useStaticQuery<SiteDataQuery>(query)

  const metaDescription = site?.siteMetadata?.description ?? description
  const author = site?.siteMetadata?.author
  const siteTitle = site?.siteMetadata?.title

  const title = joinWithDefault([siteTitle, pageTitle], ' | ', 'Title')

  return (
    <Helmet
      htmlAttributes={{
        lang: 'en',
      }}
      title={title}
      meta={[
        {
          name: `description`,
          content: metaDescription ?? '',
        },
        {
          property: `og:title`,
          content: title,
        },
        {
          property: `og:description`,
          content: metaDescription ?? '',
        },
        {
          property: `og:type`,
          content: `website`,
        },
        {
          name: `twitter:card`,
          content: `summary`,
        },
        {
          name: `twitter:creator`,
          content: author ?? '',
        },
        {
          name: `twitter:title`,
          content: title,
        },
        {
          name: `twitter:description`,
          content: metaDescription ?? '',
        },
      ]}
    />
  )
}

export default SEO
